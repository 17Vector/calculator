import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        primaryColor: Colors.deepOrangeAccent,
      ),
      home: CalculatorScreen(),
    );
  }
}

class CalculatorScreen extends StatefulWidget {
  @override
  _CalculatorScreenState createState() => _CalculatorScreenState();
}

class _CalculatorScreenState extends State<CalculatorScreen> {
  String _display = "0"; // Хранит текущее значение выражения

  // Метод для добавления значения на дисплей
  void _appendToDisplay(String value) {
    setState(() {
      // Если текущее значение на дисплее "0", то заменяем его на
      // первое введенное значение, иначе добавляем к текущему
      if (_display == "0") {
        _display = value;
      } else {
        _display += value; // Добавляем число или оператор
      }
    });
  }

  // Метод для очистки дисплея
  void _clearDisplay() {
    setState(() {
      _display = "0"; // Сбрасываем отображаемое значение до начального
    });
  }

  // Метод для выполнения расчета
  void _calculate() {
    // Здесь должна быть логика выполнения расчета
    // Пока просто очистим дисплей
    _clearDisplay();
  }

  void _swapsymb() {
    _clearDisplay();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('V-Calc', // Заголовок калькулятора
          style: TextStyle(
            fontSize: 48,
            fontWeight: FontWeight.bold,
            fontFamily: 'Arial',
            color: Colors.white,
          ),
        ),
        backgroundColor: Colors.black,
      ),
      backgroundColor: Colors.black,

      body: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          // Визуальный дисплей
          Container(
            padding: EdgeInsets.symmetric(vertical: 24, horizontal: 30),
            alignment: Alignment.centerRight,
            child: Text(
              _display, // Изменяемое состояние, которое будет обновляться
              style: TextStyle(
                fontSize: 80,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
          // Строка кнопок с фиксированным набором
          _buildButtonRow(['AC', 'C', '^', '/']),
          _buildButtonRow(['7', '8', '9', '*']),
          _buildButtonRow(['4', '5', '6', '-']),
          _buildButtonRow(['1', '2', '3', '+']),
          _buildButtonRow(['0', '.', '+/-', '=']),
        ],
      ),
    );
  }

  Widget _buildButtonRow(List<String> buttons) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: buttons.map((button) {
        if (button == 'AC' || button == 'C') {
          return _buildButton(button, onTap: _clearDisplay);
        } else if (button == '=') {
          return _buildButton(button, onTap: _calculate);
        } else if (button == '+/-') {
          return _buildButton(button, onTap: _swapsymb);
        } else {
          return _buildButton(button);
        }
      }).toList(),
    );
  }

  // Метод для создания кнопок
  Widget _buildButton(String label, {void Function()? onTap}) {
    Color buttonColor;
    Color txtButton;
    if (checkSymbol(label) == 1) {
      buttonColor = Colors.deepOrangeAccent; // Если равняется - черный
      txtButton = Colors.white;
    } else if (checkSymbol(label) == 2) {
      buttonColor = Colors.grey; // В противном случае - оранжевый
      txtButton = Colors.black;
    }
    else {
      buttonColor = Color.fromRGBO(62, 62, 62, 1.0);
      txtButton = Colors.white;
    }

    return GestureDetector(
      onTap: onTap ?? () => _appendToDisplay(label),
      child: Container(
        margin: EdgeInsets.all(8),
        padding: EdgeInsets.all(15),
        width: 85,
        height: 85,
        alignment: Alignment.center,
        decoration: BoxDecoration(
          color: buttonColor,
          borderRadius: BorderRadius.circular(35),
        ),
        child: Text(
          label,
          style: TextStyle(
            fontSize: 35,
            fontWeight: FontWeight.bold,
            color: txtButton,
          ),
        ),
      ),
    );
  }

  int checkSymbol(String label) {
    if (label == '=' || label == '/' || label == '*'
        || label == '-' || label == '+') {
      return 1;
    } else if (label == 'AC' || label == 'C' || label == '^') {
      return 2;
    }
    else {
      return 3;
    }
  }
}